package com.bridgelabz.Fundoo.services;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import javax.servlet.http.HttpServletRequest;

import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.bridgelabz.Fundoo.accesstoken.AccessToken;
import com.bridgelabz.Fundoo.dto.NoteDto;
import com.bridgelabz.Fundoo.model.Note;
import com.bridgelabz.Fundoo.model.User;
import com.bridgelabz.Fundoo.repository.LoginRegistrationRepository;
import com.bridgelabz.Fundoo.repository.NoteRepository;
import com.bridgelabz.Fundoo.result.ResponseCode;
import com.bridgelabz.Fundoo.result.ResponseStatus;

@Service("NoteServiceInterface")
public class NoteServiceImplementation implements NoteServiceInterface {

	@Autowired
	private NoteRepository noteRepository;
	@Autowired
	private AccessToken accessToken;
	@Autowired
	private LoginRegistrationRepository userRepository;
	@Autowired
	private ModelMapper modelMapper;
	@Autowired
	private ResponseCode responseCode;

	ResponseStatus response;

	public ResponseStatus createNote(NoteDto notedto, String token, HttpServletRequest request) {
		String userId = accessToken.verifyAccessToken(token);
		Optional<User> alreadyuser = userRepository.findByUserId(userId);
		if(alreadyuser.isEmpty()) {
			response = responseCode.getResponse(200, "Note Not Created...!", notedto);
			System.out.println("Note Not Created...!");
		}else {
			Note note = modelMapper.map(notedto, Note.class);
			note.setCreateddate(LocalDateTime.now());
			note.setUpdateddate(LocalDateTime.now());
			note.setUserId(alreadyuser.get().getUserId());
			Note inote = noteRepository.save(note);
			List<Note> noteList = alreadyuser.get().getNotelist();
			System.out.println(noteList);
			if(noteList.isEmpty()) {
				noteList.add(inote);
				alreadyuser.get().setNotelist(noteList);
			} else {
				new ArrayList<Note>();
				noteList.add(inote);
				alreadyuser.get().setNotelist(noteList);
			}
			userRepository.save(alreadyuser.get());
			response = responseCode.getResponse(200, "Note Created Successfully...!", notedto);
			System.out.println("Note Created Successfully...!");
		}
			
		return response;
	}

	public ResponseStatus updateNote(NoteDto notedto, String token, String noteId, HttpServletRequest request) {
		String userId = accessToken.verifyAccessToken(token);
		Optional<Note> already = noteRepository.findByUserIdAndNoteId(userId, noteId);
		if(already.isEmpty()) {
			response = responseCode.getResponse(404, "Invalid Credentials", token + noteId);
		}
		else {
			Note note = modelMapper.map(notedto, Note.class);
			note.setUpdateddate(LocalDateTime.now());
			note = noteRepository.save(note);
			Optional<User> user = userRepository.findByUserId(userId);
			
			userRepository.save(user.get());
			response = responseCode.getResponse(200, "Note Updated Successfully...!", user.get());
			System.out.println("Note Updated Successfully...!");
		}
		return response;
	}

}
