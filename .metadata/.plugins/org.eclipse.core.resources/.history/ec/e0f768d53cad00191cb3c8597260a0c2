package com.bridgelabz.Fundoo.accesstoken;

import java.io.UnsupportedEncodingException;
import java.util.Optional;

import org.springframework.stereotype.Component;

import com.auth0.jwt.JWT;
import com.auth0.jwt.JWTVerifier;
import com.auth0.jwt.JWTVerifier.Verification;
import com.auth0.jwt.algorithms.Algorithm;
import com.auth0.jwt.exceptions.JWTDecodeException;
import com.auth0.jwt.exceptions.SignatureVerificationException;
import com.auth0.jwt.interfaces.Claim;
import com.auth0.jwt.interfaces.DecodedJWT;

@Component
public class AccessToken {

	private String secret = "name";

	public String generateAccessToken(String userId) {

		String token = null;
		try {
			token = JWT.create().withClaim("userId", userId).sign(Algorithm.HMAC256(secret));
		} catch (IllegalArgumentException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return token;
	}
	
	public String verifyAccessToken(String token) {

		String userId = null;
		 try {
		        JWTVerifier verifier = JWT.require(Algorithm.HMAC256(secret)).build();

		        verifier.verify(token);

		        JWT decode = JWT.decode(token);
		        userId = decode.getClaim("userId").asString();
		       
		    } catch (UnsupportedEncodingException e) {
		         e.printStackTrace();;
		    }
		    catch(SignatureVerificationException e) {
		    	e.printStackTrace();
		    }catch(JWTDecodeException e) {
		    	e.printStackTrace();
		    }
		 return userId;
	}
/*
	public String verifyAccessToken(String token) {

		String userId;
		Verification verification = null;
		try {
			verification = JWT.require(Algorithm.HMAC256(secret));
		} catch (IllegalArgumentException e) {
			e.printStackTrace();
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} 
		System.out.println("hi");
		JWTVerifier jwtVerifier = verification.build();
		System.out.println("hhhhh");
		DecodedJWT decodedJWT = jwtVerifier.verify(token);
		decodedJWT.getAlgorithm();
		Claim claim = decodedJWT.getClaim("userId");
		System.out.println(claim.asString());
		userId = claim.asString();
		return userId;
	}
*/
}
